"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAdmin = void 0;
const express_1 = __importDefault(require("express"));
const data_source_1 = require("../data-source");
const User_1 = require("../entity/User");
const app = (0, express_1.default)();
app.use(express_1.default.json());
// üìå Admin jogosults√°g ellen≈ërz√©se
const isAdmin = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    let invalidFields = []; // Hib√°s mez≈ëk t√°rol√°sa
    try {
        const { id } = req.user; // Kinyerj√ºk az id-t a req.user-b≈ël
        if (!id) {
            invalidFields.push('id');
            return res.status(400).json({ message: "Felhaszn√°l√≥i azonos√≠t√≥ nem tal√°lhat√≥ a tokenben!", invalid: invalidFields });
        }
        const user = yield data_source_1.AppDataSource.getRepository(User_1.User).findOne({ where: { id } });
        if (!user) {
            invalidFields.push('user');
            return res.status(404).json({ message: "Felhaszn√°l√≥ nem tal√°lhat√≥!", invalid: invalidFields });
        }
        if (user.role !== User_1.UserRole.ADMIN) {
            invalidFields.push('user.role');
            return res.status(403).json({ message: "Hozz√°f√©r√©s megtagadva: csak adminok v√©gezhetik ezt a m≈±veletet!", invalid: invalidFields });
        }
        next(); // Ha minden rendben, mehet tov√°bb a k√©relem
    }
    catch (error) {
        console.error("Hiba a jogosults√°g ellen≈ërz√©se sor√°n:", error);
        return res.status(500).json({ message: "Hiba t√∂rt√©nt a jogosults√°g ellen≈ërz√©se sor√°n." });
    }
});
exports.isAdmin = isAdmin;
