"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const data_source_1 = require("../data-source");
const User_1 = require("../entity/User");
const Subscription_1 = require("../entity/Subscription");
const Package_1 = require("../entity/Package");
const promise_1 = __importDefault(require("mysql2/promise"));
const password_1 = require("../utils/password");
const nodemailer_1 = __importDefault(require("nodemailer"));
const dotenv_1 = __importDefault(require("dotenv"));
const bcrypt_1 = __importDefault(require("bcrypt")); // bcrypt import√°l√°sa
const isAdmin_1 = require("../utils/isAdmin");
const jwt = require('jsonwebtoken');
dotenv_1.default.config();
const ejs_1 = __importDefault(require("ejs"));
const router = (0, express_1.Router)();
const db = promise_1.default.createPool({
    host: "localhost",
    user: "root",
    password: "",
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
});
// SMTP be√°ll√≠t√°sok
const transporter = nodemailer_1.default.createTransport({
    host: process.env.SMTP_HOST,
    port: Number(process.env.SMTP_PORT),
    secure: true,
    auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
    },
});
function generateToken(user) {
    return jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET, { expiresIn: '1d' });
}
function tokencheck(req, res, next) {
    const authHeader = req.header('Authorization');
    if (!authHeader) {
        return res.status(400).send('Jelentkezz be!');
    }
    const token = authHeader.split(' ')[1]; // A Bearer token kinyer√©se
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log(decoded); // Dek√≥dolt token ki√≠rat√°sa
        req.user = decoded; // A dek√≥dolt tokenet hozz√°rendeled a req.user-hez
        next(); // Ha √©rv√©nyes a token, megy tov√°bb
    }
    catch (error) {
        return res.status(400).send('Hib√°s vagy lej√°rt token!');
    }
}
// üìå Jelsz√≥ √©rv√©nyes√≠t√©si szab√°lyok
function validatePassword(password) {
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{8,}$/;
    return passwordRegex.test(password);
}
router.post("/register", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    let invalidFields = [];
    try {
        console.log('Regisztr√°ci√≥s k√©r√©s √©rkezett:', req.body); // Mi √©rkezik a frontend-r≈ël?
        const { username, email, password } = req.body;
        if (!username || !email || !password) {
            if (!username)
                invalidFields.push('username');
            if (!email)
                invalidFields.push('email');
            if (!password)
                invalidFields.push('password');
            return res.status(400).json({
                message: "Hi√°nyz√≥ adatok! (username, email, password sz√ºks√©ges)",
                invalid: invalidFields
            });
        }
        if (!validatePassword(password)) {
            invalidFields.push('password');
            return res.status(400).json({
                message: "A jelsz√≥ nem felel meg az er≈ëss√©gi k√∂vetelm√©nyeknek!",
                invalid: invalidFields
            });
        }
        const existingUser = yield data_source_1.AppDataSource.getRepository(User_1.User).findOne({ where: { email } });
        if (existingUser) {
            invalidFields.push('email');
            return res.status(400).json({
                message: "Ez az e-mail m√°r l√©tezik!",
                invalid: invalidFields
            });
        }
        // Jelsz√≥ hash-el√©se bcrypt-tel
        const hashedPassword = yield bcrypt_1.default.hash(password, 10);
        const user = new User_1.User();
        user.name = username;
        user.email = email;
        user.password = hashedPassword;
        yield data_source_1.AppDataSource.getRepository(User_1.User).save(user);
        // Napl√≥zzuk, hogy mi t√∂rt√©nik, amikor sikeres a regisztr√°ci√≥
        console.log("Sikeres regisztr√°ci√≥:", user);
        res.status(201).json({
            user: { name: user.name, email: user.email },
            invalid: [],
            token: generateToken(user)
        });
    }
    catch (error) {
        console.error("Hiba a regisztr√°ci√≥ sor√°n:", error);
        res.status(500).json({
            message: "Hiba t√∂rt√©nt a regisztr√°ci√≥ sor√°n",
            invalid: [] // Az esetleges hiba eset√©n is √ºres t√∂mb√∂t k√ºld√ºnk
        });
    }
}));
// üìå Bejelentkez√©s
router.post("/login", (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    let invalidFields = []; // A hib√°s mez≈ëk t√°rol√°sa
    try {
        const { email, password } = req.body;
        if (!email || !password) {
            if (!email)
                invalidFields.push('email');
            if (!password)
                invalidFields.push('password');
            return res.status(400).send({ message: "Hi√°nyz√≥ adatok! (email, password sz√ºks√©ges)", invalid: invalidFields });
        }
        const user = yield data_source_1.AppDataSource.getRepository(User_1.User).findOne({ where: { email } });
        if (!user) {
            invalidFields.push('user');
            return res.status(400).send({ message: "Felhaszn√°l√≥ nem tal√°lhat√≥!", invalid: invalidFields });
        }
        const isPasswordValid = yield bcrypt_1.default.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(400).send({ message: "Hib√°s jelsz√≥!" });
        }
        res.status(200).send({
            message: "Sikeres bejelentkez√©s!",
            token: generateToken(user)
        });
    }
    catch (error) {
        console.error("Hiba a bejelentkez√©s sor√°n:", error);
        res.status(500).send({ message: "Hiba t√∂rt√©nt a bejelentkez√©s sor√°n" + error });
    }
}));
// üìå Felhaszn√°l√≥k kilist√°z√°sa (csak adminoknak)
router.get('/', tokencheck, isAdmin_1.isAdmin, (_req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const users = yield data_source_1.AppDataSource.getRepository(User_1.User).find({
            select: ["id", "name", "email", "role"], // V√°laszd ki, mely mez≈ëket szeretn√©l visszakapni
        });
        res.status(200).send({ users });
    }
    catch (error) {
        console.error("Hiba a felhaszn√°l√≥k kilist√°z√°sa sor√°n:", error);
        res.status(500).send({ message: "Hiba t√∂rt√©nt a felhaszn√°l√≥k lek√©r√©sekor." + error });
    }
}));
// üìå Felhaszn√°l√≥i el≈ëfizet√©s (egy domain per user, csak bejelentkezett felhaszn√°l√≥knak)
router.post("/subscribe", tokencheck, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    let invalidFields = []; // A hib√°s mez≈ëk t√°rol√°sa
    try {
        const { packageId } = req.body;
        if (!packageId) {
            invalidFields.push('packageId');
            return res.status(400).send({ message: "Hi√°nyz√≥ adat! (packageId sz√ºks√©ges)", invalid: invalidFields });
        }
        const user = yield data_source_1.AppDataSource.getRepository(User_1.User).findOne({ where: { id: (_a = req.user) === null || _a === void 0 ? void 0 : _a.userId } });
        if (!user) {
            invalidFields.push('user');
            return res.status(404).send({ message: "Felhaszn√°l√≥ nem tal√°lhat√≥!", invalid: invalidFields });
        }
        const existingSubscription = yield data_source_1.AppDataSource.getRepository(Subscription_1.Subscription).findOne({ where: { user: user } });
        if (existingSubscription) {
            return res.status(400).send({ message: "M√°r van el≈ëfizet√©sed!" });
        }
        const domain = user.name.trim().toLowerCase().replace(/\s+/g, '').replace(/\W/g, '');
        const packageData = yield data_source_1.AppDataSource.getRepository(Package_1.Package).findOne({ where: { id: packageId } });
        if (!packageData) {
            invalidFields.push('packageData');
            return res.status(404).send({ message: "T√°rhelycsomag nem tal√°lhat√≥!", invalid: invalidFields });
        }
        const rawPassword = (0, password_1.generatePassword)();
        const hashedPassword = yield bcrypt_1.default.hash(rawPassword, 10);
        const databaseName = `13a_${domain}`;
        const mysqlUser = `13a_${domain}`;
        const mysqlHost = "localhost";
        const subscription = new Subscription_1.Subscription();
        subscription.user = user;
        subscription.package = packageData;
        subscription.date = new Date();
        subscription.domain = domain;
        yield data_source_1.AppDataSource.getRepository(Subscription_1.Subscription).save(subscription);
        const connection = yield db.getConnection();
        try {
            yield connection.query("CREATE DATABASE ??;", [databaseName]);
            yield connection.query("CREATE USER ??@?? IDENTIFIED BY ?;", [mysqlUser, mysqlHost, rawPassword]);
            yield connection.query(`
        GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, INDEX, REFERENCES,
              CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, SHOW VIEW, CREATE ROUTINE,
              ALTER ROUTINE, EVENT, TRIGGER, 
              CREATE USER, CREATE TABLESPACE, CREATE VIEW, RELOAD, SHUTDOWN,
              PROCESS, FILE, SUPER, CREATE TEMPORARY TABLES, CREATE DATABASE, 
              GRANT OPTION
        ON ??.* TO ??@??;
      `, [databaseName, mysqlUser, mysqlHost]);
            yield connection.query(`FLUSH PRIVILEGES;`);
        }
        finally {
            connection.release();
        }
        ejs_1.default.renderFile("views/subscription-email.ejs", { user, mysqlUser, rawPassword, databaseName, domain, mysqlHost }, (err, html) => __awaiter(void 0, void 0, void 0, function* () {
            if (err) {
                console.error("E-mail sablon renderel√©si hiba:", err);
                return res.status(500).send({ message: "Hiba t√∂rt√©nt az e-mail sablon renderel√©sekor", error: err });
            }
            const mailOptions = {
                from: `"T√°rhelyszolg√°ltat√≥" <${process.env.SMTP_USER}>`,
                to: user.email,
                subject: "El≈ëfizet√©s visszaigazol√°sa",
                html: html,
            };
            try {
                yield transporter.sendMail(mailOptions);
                console.log("E-mail sikeresen elk√ºldve");
                res.status(201).send({ message: "El≈ëfizet√©s sikeres!", domain });
            }
            catch (error) {
                console.error("E-mail k√ºld√©si hiba:", error);
                res.status(500).send({ message: "Hiba t√∂rt√©nt az e-mail k√ºld√©sekor", error });
            }
        }));
    }
    catch (error) {
        console.error("Hiba az el≈ëfizet√©s sor√°n:", error);
        res.status(500).send({ message: "Hiba t√∂rt√©nt az el≈ëfizet√©s sor√°n", error });
    }
}));
exports.default = router;
