import express from "express";
import { AppDataSource } from "../data-source";
import { User, UserRole } from "../entity/User";
import jwt from "jsonwebtoken";

const app = express();
app.use(express.json());

// üìå Admin jogosults√°g ellen≈ërz√©se
const isAdmin = async (req, res, next) => {
  let invalidFields = [];  // Hib√°s mez≈ëk t√°rol√°sa
  try {
    const { id } = req.user; // Kinyerj√ºk az id-t a req.user-b≈ël
    if (!id) {
      invalidFields.push('id');
      return res.status(400).json({ message: "Felhaszn√°l√≥i azonos√≠t√≥ nem tal√°lhat√≥ a tokenben!", invalid: invalidFields });
    }

    const user = await AppDataSource.getRepository(User).findOne({ where: { id } });

    if (!user) {
      invalidFields.push('user');
      return res.status(404).json({ message: "Felhaszn√°l√≥ nem tal√°lhat√≥!", invalid: invalidFields });
    }

    if (user.role !== UserRole.ADMIN) {
      invalidFields.push('user.role');
      return res.status(403).json({ message: "Hozz√°f√©r√©s megtagadva: csak adminok v√©gezhetik ezt a m≈±veletet!", invalid: invalidFields });
    }

    next(); // Ha minden rendben, mehet tov√°bb a k√©relem
  } catch (error) {
    console.error("Hiba a jogosults√°g ellen≈ërz√©se sor√°n:", error);
    return res.status(500).json({ message: "Hiba t√∂rt√©nt a jogosults√°g ellen≈ërz√©se sor√°n." });
  }
};

export { isAdmin };
